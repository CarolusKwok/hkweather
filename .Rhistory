}
df = data.frame(temp1 = temp1,
pres1 = pres1,
temp2 = temp1,
pres2 = pres2) %>%
mutate(rs_f = enq_rs2(temp = temp1, pres = pres1, find = "rs")$rs,
temp_k = temp2 + 273.15,
pres_k = pres1 / 10,
rs_k   = rs_f / 1000,
slope  = (a*temp_k + c*rs_k)/(pres_k*(1 + (b * rs_k / temp_k^2)))) %>%
select(-rs_f, -temp_k, -pres_k, -rs_k) %>%
mutate(work = ifelse(pres1 != pres2, T, F))
for(i in 1:nrow(df)){
work = df$work[i]
presc= df$pres2[i]
tempc= df$temp2[i]
slope= df$slope[i]
while(work){
tempc = tempc + slope*(-acc)
}
}
return(df)
}
enq_mabt(30, 1000, 900, acc = 2)
#'
#' @param temp1 Temperature at Pressure level 1, in degC. Only accepts numbers or a list of numbers.
#' @param pres1 Pressure at Pressure level 1, in hPa. Only accepts numbers or a list of numbers.
#' @param pres2 Pressure at Pressure level 2, in hPa. Only accepts numbers or a list of numbers.
#' @param acc Accuracy of the calculation. Smaller number, Higher accuracy. Only accepts number.
#'
#' @return
#' @export
#'
#' @examples enq_mabt(c(10, 20, 30), 1000, 500) should return -125.4218, -119.2539, -112.3171, as a list
enq_mabt = function(temp1, pres1, pres2, acc = 0.1){
hkweather::hkw_lib()
##### Test input #####
flag_temp1 = ifelse(is.numeric(temp1), F, T)
flag_pres1 = ifelse(is.numeric(pres1), F, T)
flag_pres2 = ifelse(is.numeric(pres2), F, T)
flag_acc   = ifelse(is.numeric(acc), F, T)
flag_t1_p1 = F
flag_t1_p2 = F
flag_p1_p2 = F
if(length(temp1) != 1){
if(length(pres1) != 1){
if(length(temp1) != length(pres1)){
flag_t1_p1 = T
}
}
}
if(length(temp1) != 1){
if(length(pres2) != 1){
if(length(temp1) != length(pres2)){
flag_t1_p2 = T
}
}
}
if(length(pres1) != 1){
if(length(pres2) != 1){
if(length(pres1) != length(pres2)){
flag_t1_p1 = T
}
}
}
flag_all = flag_temp1 | flag_pres1 | flag_pres2 | flag_acc | flag_t1_p1 | flag_t1_p2 | flag_p1_p2
if(flag_all == T){
message("ERROR: Something is wrong with your input.")
if(flag_temp1){message("ERROR: variable temp1 is incorrect. (Only accept numbers)")}
if(flag_pres1){message("ERROR: variable pres1 is incorrect. (Only accept numbers)")}
if(flag_pres2){message("ERROR: variable pres2 is incorrect. (Only accept numbers)")}
if(flag_acc){message("ERROR: variable acc is incorrect. (Only accept numbers)")}
if(flag_t1_p1){message("ERROR: variable temp1 and pres1 are incorrect. (Only accept list of numbers with the same length)")}
if(flag_t1_p2){message("ERROR: variable temp1 and pres2 are incorrect. (Only accept list of numbers with the same length)")}
if(flag_p1_p2){message("ERROR: variable pres1 and pres2 are incorrect. (Only accept list of numbers with the same length)")}
return(message("---ENQUIRE ERROR---"))
}
##### Additional Variables #####
a = 0.28571
b = 1.35*10^7
c = 2488.4
##### Start calculations #####
enq_rs2 = function(temp, pres, find = "rs"){
df1 = data.frame(temp = temp,
pres = pres/10) %>%
mutate(es = (0.6113 * exp(5423 * (1/273.15 - 1/(temp + 273.15))))) %>%
mutate(rs = (0.622 * es)/(pres - es)) %>%
mutate(es = es * 10,
rs = rs * 1000)
df1
}
df = data.frame(temp1 = temp1,
pres1 = pres1,
temp2 = temp1,
pres2 = pres2) %>%
mutate(rs_f = enq_rs2(temp = temp1, pres = pres1, find = "rs")$rs,
temp_k = temp2 + 273.15,
pres_k = pres1 / 10,
rs_k   = rs_f / 1000,
slope  = (a*temp_k + c*rs_k)/(pres_k*(1 + (b * rs_k / temp_k^2)))) %>%
select(-rs_f, -temp_k, -pres_k, -rs_k) %>%
mutate(work = ifelse(pres1 != pres2, T, F))
for(i in 1:nrow(df)){
work = df$work[i]
presc= df$pres2[i]
tempc= df$temp2[i]
slope= df$slope[i]
while(work){
tempc = tempc + slope*(-acc)
work = F
}
}
return(df)
}
enq_mabt(30, 1000, 900, acc = 2)
#'
#' @param temp1 Temperature at Pressure level 1, in degC. Only accepts numbers or a list of numbers.
#' @param pres1 Pressure at Pressure level 1, in hPa. Only accepts numbers or a list of numbers.
#' @param pres2 Pressure at Pressure level 2, in hPa. Only accepts numbers or a list of numbers.
#' @param acc Accuracy of the calculation. Smaller number, Higher accuracy. Only accepts number.
#'
#' @return
#' @export
#'
#' @examples enq_mabt(c(10, 20, 30), 1000, 500) should return -125.4218, -119.2539, -112.3171, as a list
enq_mabt = function(temp1, pres1, pres2, acc = 0.1){
hkweather::hkw_lib()
##### Test input #####
flag_temp1 = ifelse(is.numeric(temp1), F, T)
flag_pres1 = ifelse(is.numeric(pres1), F, T)
flag_pres2 = ifelse(is.numeric(pres2), F, T)
flag_acc   = ifelse(is.numeric(acc), F, T)
flag_t1_p1 = F
flag_t1_p2 = F
flag_p1_p2 = F
if(length(temp1) != 1){
if(length(pres1) != 1){
if(length(temp1) != length(pres1)){
flag_t1_p1 = T
}
}
}
if(length(temp1) != 1){
if(length(pres2) != 1){
if(length(temp1) != length(pres2)){
flag_t1_p2 = T
}
}
}
if(length(pres1) != 1){
if(length(pres2) != 1){
if(length(pres1) != length(pres2)){
flag_t1_p1 = T
}
}
}
flag_all = flag_temp1 | flag_pres1 | flag_pres2 | flag_acc | flag_t1_p1 | flag_t1_p2 | flag_p1_p2
if(flag_all == T){
message("ERROR: Something is wrong with your input.")
if(flag_temp1){message("ERROR: variable temp1 is incorrect. (Only accept numbers)")}
if(flag_pres1){message("ERROR: variable pres1 is incorrect. (Only accept numbers)")}
if(flag_pres2){message("ERROR: variable pres2 is incorrect. (Only accept numbers)")}
if(flag_acc){message("ERROR: variable acc is incorrect. (Only accept numbers)")}
if(flag_t1_p1){message("ERROR: variable temp1 and pres1 are incorrect. (Only accept list of numbers with the same length)")}
if(flag_t1_p2){message("ERROR: variable temp1 and pres2 are incorrect. (Only accept list of numbers with the same length)")}
if(flag_p1_p2){message("ERROR: variable pres1 and pres2 are incorrect. (Only accept list of numbers with the same length)")}
return(message("---ENQUIRE ERROR---"))
}
##### Additional Variables #####
a = 0.28571
b = 1.35*10^7
c = 2488.4
##### Start calculations #####
enq_rs2 = function(temp, pres, find = "rs"){
df1 = data.frame(temp = temp,
pres = pres/10) %>%
mutate(es = (0.6113 * exp(5423 * (1/273.15 - 1/(temp + 273.15))))) %>%
mutate(rs = (0.622 * es)/(pres - es)) %>%
mutate(es = es * 10,
rs = rs * 1000)
df1
}
df = data.frame(temp1 = temp1,
pres1 = pres1,
temp2 = temp1,
pres2 = pres2) %>%
mutate(rs_f = enq_rs2(temp = temp1, pres = pres1, find = "rs")$rs,
temp_k = temp2 + 273.15,
pres_k = pres1 / 10,
rs_k   = rs_f / 1000,
slope_i= (a*temp_k + c*rs_k)/(pres_k*(1 + (b * rs_k / temp_k^2)))) %>%
select(-rs_f, -temp_k, -pres_k, -rs_k) %>%
mutate(work = ifelse(pres1 != pres2, T, F))
for(i in 1:nrow(df)){
work = df$work[i]
presc= df$pres2[i]
tempc= df$temp2[i]
slope= df$slope_i[i]
while(work){
tempc = tempc + slope*(-acc)
work = F
}
}
return(df)
}
enq_mabt(30, 1000, 900, acc = 2)
#'
#' @param temp1 Temperature at Pressure level 1, in degC. Only accepts numbers or a list of numbers.
#' @param pres1 Pressure at Pressure level 1, in hPa. Only accepts numbers or a list of numbers.
#' @param pres2 Pressure at Pressure level 2, in hPa. Only accepts numbers or a list of numbers.
#' @param acc Accuracy of the calculation. Smaller number, Higher accuracy. Only accepts number.
#'
#' @return
#' @export
#'
#' @examples enq_mabt(c(10, 20, 30), 1000, 500) should return -125.4218, -119.2539, -112.3171, as a list
enq_mabt = function(temp1, pres1, pres2, acc = 0.1){
hkweather::hkw_lib()
##### Test input #####
flag_temp1 = ifelse(is.numeric(temp1), F, T)
flag_pres1 = ifelse(is.numeric(pres1), F, T)
flag_pres2 = ifelse(is.numeric(pres2), F, T)
flag_acc   = ifelse(is.numeric(acc), F, T)
flag_t1_p1 = F
flag_t1_p2 = F
flag_p1_p2 = F
if(length(temp1) != 1){
if(length(pres1) != 1){
if(length(temp1) != length(pres1)){
flag_t1_p1 = T
}
}
}
if(length(temp1) != 1){
if(length(pres2) != 1){
if(length(temp1) != length(pres2)){
flag_t1_p2 = T
}
}
}
if(length(pres1) != 1){
if(length(pres2) != 1){
if(length(pres1) != length(pres2)){
flag_t1_p1 = T
}
}
}
flag_all = flag_temp1 | flag_pres1 | flag_pres2 | flag_acc | flag_t1_p1 | flag_t1_p2 | flag_p1_p2
if(flag_all == T){
message("ERROR: Something is wrong with your input.")
if(flag_temp1){message("ERROR: variable temp1 is incorrect. (Only accept numbers)")}
if(flag_pres1){message("ERROR: variable pres1 is incorrect. (Only accept numbers)")}
if(flag_pres2){message("ERROR: variable pres2 is incorrect. (Only accept numbers)")}
if(flag_acc){message("ERROR: variable acc is incorrect. (Only accept numbers)")}
if(flag_t1_p1){message("ERROR: variable temp1 and pres1 are incorrect. (Only accept list of numbers with the same length)")}
if(flag_t1_p2){message("ERROR: variable temp1 and pres2 are incorrect. (Only accept list of numbers with the same length)")}
if(flag_p1_p2){message("ERROR: variable pres1 and pres2 are incorrect. (Only accept list of numbers with the same length)")}
return(message("---ENQUIRE ERROR---"))
}
##### Additional Variables #####
a = 0.28571
b = 1.35*10^7
c = 2488.4
##### Start calculations #####
enq_rs2 = function(temp, pres, find = "rs"){
df1 = data.frame(temp = temp,
pres = pres/10) %>%
mutate(es = (0.6113 * exp(5423 * (1/273.15 - 1/(temp + 273.15))))) %>%
mutate(rs = (0.622 * es)/(pres - es)) %>%
mutate(es = es * 10,
rs = rs * 1000)
df1
}
df = data.frame(temp1 = temp1,
pres1 = pres1,
temp2 = temp1,
pres2 = pres2) %>%
mutate(rs_f = enq_rs2(temp = temp1, pres = pres1, find = "rs")$rs,
temp_k = temp2 + 273.15,
pres_k = pres1 / 10,
rs_k   = rs_f / 1000,
slope_i= (a*temp_k + c*rs_k)/(pres_k*(1 + (b * rs_k / temp_k^2)))) %>%
select(-rs_f, -temp_k, -pres_k, -rs_k) %>%
mutate(work = ifelse(pres1 != pres2, T, F))
for(i in 1:nrow(df)){
work = df$work[i]
presc= df$pres2[i]
tempc= df$temp2[i]
slope= df$slope_i[i]
while(work){
tempc = tempc + slope*(-acc)
if(pres1 > pres2){presc = presc - acc}
if(pres1 < pres2){presc = presc + acc}
rsc = enq_rs2(temp = tempc, pres = presc, find = "rs")$rs
rsk = rsc/1000
presk = presc/10
tempk = tempc + 273.15
slope = (a*tempk + c*rsk)/(presk*(1 + (b * rsk / tempk^2)))
work = ifelse(pres1 > pres2,
ifelse(presc > pres2, T, F),
ifelse(presc < pres2, T, F))
}
}
return(df)
}
enq_mabt(30, 1000, 900, acc = 2)
#'
#' @param temp1 Temperature at Pressure level 1, in degC. Only accepts numbers or a list of numbers.
#' @param pres1 Pressure at Pressure level 1, in hPa. Only accepts numbers or a list of numbers.
#' @param pres2 Pressure at Pressure level 2, in hPa. Only accepts numbers or a list of numbers.
#' @param acc Accuracy of the calculation. Smaller number, Higher accuracy. Only accepts number.
#'
#' @return
#' @export
#'
#' @examples enq_mabt(c(10, 20, 30), 1000, 500) should return -125.4218, -119.2539, -112.3171, as a list
enq_mabt = function(temp1, pres1, pres2, acc = 0.1){
hkweather::hkw_lib()
##### Test input #####
flag_temp1 = ifelse(is.numeric(temp1), F, T)
flag_pres1 = ifelse(is.numeric(pres1), F, T)
flag_pres2 = ifelse(is.numeric(pres2), F, T)
flag_acc   = ifelse(is.numeric(acc), F, T)
flag_t1_p1 = F
flag_t1_p2 = F
flag_p1_p2 = F
if(length(temp1) != 1){
if(length(pres1) != 1){
if(length(temp1) != length(pres1)){
flag_t1_p1 = T
}
}
}
if(length(temp1) != 1){
if(length(pres2) != 1){
if(length(temp1) != length(pres2)){
flag_t1_p2 = T
}
}
}
if(length(pres1) != 1){
if(length(pres2) != 1){
if(length(pres1) != length(pres2)){
flag_t1_p1 = T
}
}
}
flag_all = flag_temp1 | flag_pres1 | flag_pres2 | flag_acc | flag_t1_p1 | flag_t1_p2 | flag_p1_p2
if(flag_all == T){
message("ERROR: Something is wrong with your input.")
if(flag_temp1){message("ERROR: variable temp1 is incorrect. (Only accept numbers)")}
if(flag_pres1){message("ERROR: variable pres1 is incorrect. (Only accept numbers)")}
if(flag_pres2){message("ERROR: variable pres2 is incorrect. (Only accept numbers)")}
if(flag_acc){message("ERROR: variable acc is incorrect. (Only accept numbers)")}
if(flag_t1_p1){message("ERROR: variable temp1 and pres1 are incorrect. (Only accept list of numbers with the same length)")}
if(flag_t1_p2){message("ERROR: variable temp1 and pres2 are incorrect. (Only accept list of numbers with the same length)")}
if(flag_p1_p2){message("ERROR: variable pres1 and pres2 are incorrect. (Only accept list of numbers with the same length)")}
return(message("---ENQUIRE ERROR---"))
}
##### Additional Variables #####
a = 0.28571
b = 1.35*10^7
c = 2488.4
##### Start calculations #####
enq_rs2 = function(temp, pres, find = "rs"){
df1 = data.frame(temp = temp,
pres = pres/10) %>%
mutate(es = (0.6113 * exp(5423 * (1/273.15 - 1/(temp + 273.15))))) %>%
mutate(rs = (0.622 * es)/(pres - es)) %>%
mutate(es = es * 10,
rs = rs * 1000)
df1
}
df = data.frame(temp1 = temp1,
pres1 = pres1,
temp2 = temp1,
pres2 = pres2) %>%
mutate(rs_f = enq_rs2(temp = temp1, pres = pres1, find = "rs")$rs,
temp_k = temp2 + 273.15,
pres_k = pres1 / 10,
rs_k   = rs_f / 1000,
slope_i= (a*temp_k + c*rs_k)/(pres_k*(1 + (b * rs_k / temp_k^2)))) %>%
select(-rs_f, -temp_k, -pres_k, -rs_k) %>%
mutate(work = ifelse(pres1 != pres2, T, F))
for(i in 1:nrow(df)){
work = df$work[i]
presc= df$pres2[i]
tempc= df$temp2[i]
slope= df$slope_i[i]
while(work){
tempc = tempc + slope*(-acc)
if(pres1 > pres2){presc = presc - acc}
if(pres1 < pres2){presc = presc + acc}
rsc = enq_rs2(temp = tempc, pres = presc, find = "rs")$rs
rsk = rsc/1000
presk = presc/10
tempk = tempc + 273.15
slope = (a*tempk + c*rsk)/(presk*(1 + (b * rsk / tempk^2)))
work = ifelse(pres1 > pres2,
ifelse(presc > pres2, T, F),
ifelse(presc < pres2, T, F))
print(tempc)
}
}
return(df)
}
enq_mabt(30, 1000, 900, acc = 2)
enq_mabt(30, 1000, 994, acc = 2)
#'
#' @param temp1 Temperature at Pressure level 1, in degC. Only accepts numbers or a list of numbers.
#' @param pres1 Pressure at Pressure level 1, in hPa. Only accepts numbers or a list of numbers.
#' @param pres2 Pressure at Pressure level 2, in hPa. Only accepts numbers or a list of numbers.
#' @param acc Accuracy of the calculation. Smaller number, Higher accuracy. Only accepts number.
#'
#' @return
#' @export
#'
#' @examples enq_mabt(c(10, 20, 30), 1000, 500) should return -125.4218, -119.2539, -112.3171, as a list
enq_mabt = function(temp1, pres1, pres2, acc = 0.1){
hkweather::hkw_lib()
##### Test input #####
flag_temp1 = ifelse(is.numeric(temp1), F, T)
flag_pres1 = ifelse(is.numeric(pres1), F, T)
flag_pres2 = ifelse(is.numeric(pres2), F, T)
flag_acc   = ifelse(is.numeric(acc), F, T)
flag_t1_p1 = F
flag_t1_p2 = F
flag_p1_p2 = F
if(length(temp1) != 1){
if(length(pres1) != 1){
if(length(temp1) != length(pres1)){
flag_t1_p1 = T
}
}
}
if(length(temp1) != 1){
if(length(pres2) != 1){
if(length(temp1) != length(pres2)){
flag_t1_p2 = T
}
}
}
if(length(pres1) != 1){
if(length(pres2) != 1){
if(length(pres1) != length(pres2)){
flag_t1_p1 = T
}
}
}
flag_all = flag_temp1 | flag_pres1 | flag_pres2 | flag_acc | flag_t1_p1 | flag_t1_p2 | flag_p1_p2
if(flag_all == T){
message("ERROR: Something is wrong with your input.")
if(flag_temp1){message("ERROR: variable temp1 is incorrect. (Only accept numbers)")}
if(flag_pres1){message("ERROR: variable pres1 is incorrect. (Only accept numbers)")}
if(flag_pres2){message("ERROR: variable pres2 is incorrect. (Only accept numbers)")}
if(flag_acc){message("ERROR: variable acc is incorrect. (Only accept numbers)")}
if(flag_t1_p1){message("ERROR: variable temp1 and pres1 are incorrect. (Only accept list of numbers with the same length)")}
if(flag_t1_p2){message("ERROR: variable temp1 and pres2 are incorrect. (Only accept list of numbers with the same length)")}
if(flag_p1_p2){message("ERROR: variable pres1 and pres2 are incorrect. (Only accept list of numbers with the same length)")}
return(message("---ENQUIRE ERROR---"))
}
##### Additional Variables #####
a = 0.28571
b = 1.35*10^7
c = 2488.4
##### Start calculations #####
enq_rs2 = function(temp, pres, find = "rs"){
df1 = data.frame(temp = temp,
pres = pres/10) %>%
mutate(es = (0.6113 * exp(5423 * (1/273.15 - 1/(temp + 273.15))))) %>%
mutate(rs = (0.622 * es)/(pres - es)) %>%
mutate(es = es * 10,
rs = rs * 1000)
df1
}
df = data.frame(temp1 = temp1,
pres1 = pres1,
temp2 = temp1,
pres2 = pres2) %>%
mutate(rs_f = enq_rs2(temp = temp1, pres = pres1, find = "rs")$rs,
temp_k = temp2 + 273.15,
pres_k = pres1 / 10,
rs_k   = rs_f / 1000,
slope_i= (a*temp_k + c*rs_k)/(pres_k*(1 + (b * rs_k / temp_k^2)))) %>%
select(-rs_f, -temp_k, -pres_k, -rs_k) %>%
mutate(work = ifelse(pres1 != pres2, T, F))
for(i in 1:nrow(df)){
work = df$work[i]
presc= df$pres2[i]
tempc= df$temp2[i]
slope= df$slope_i[i]
while(work){
tempc = tempc + slope*(-acc)
if(pres1 > pres2){presc = presc - acc}
if(pres1 < pres2){presc = presc + acc}
rsc = enq_rs2(temp = tempc, pres = presc, find = "rs")$rs
rsk = rsc/1000
presk = presc/10
tempk = tempc + 273.15
slope = (a*tempk + c*rsk)/(presk*(1 + (b * rsk / tempk^2)))
work = ifelse(pres1 > pres2,
ifelse(presc >= pres2, T, F),
ifelse(presc <= pres2, T, F))
print(tempc)
}
}
return(df)
}
enq_mabt(30, 1000, 994, acc = 2)
enq_mabt(30, 1000, 996, acc = 2)
enq_mabt(30, 1000, 998, acc = 2)
?smooth.spline
